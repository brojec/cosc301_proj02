/*
	cosc301 project 2
	October, 2013
	Contributers:
		Carrie Burgess
		Zombie bastard (Mac Lanphier)
		Brett Rojec
		
NB:
	We're trying to do string modifications in-place, to avoid pointer confusion
	and memory leaks & annoying stuff.  Plus I think it's generally cleaner & 
	no more difficult
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <ctype.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <poll.h>
#include <signal.h>

char** tokenify(char*, const char*);

int parallel=0; /*B: flag for what mode we're running in
	          1: process things in parallel (actually, any nonzero)
	          0: process sequentially */

char* whitespace = " \n\v\t\r\f";	         
	         

//Brett
int is_space_or_semi(char target){
	return isspace(target) || target==';';
}

//Carrie

struct node { //will create a linked list of processes
	char ** arr_for_exec;
	pid_t child_pid;
	int * child_status;
	struct node* next;
};

//Carrie
void check_process_s(struct node *head) { //this will only ever be one node long.  
//wait for process to finish, then kill node
	if(head == NULL) {
		printf("There are no proccesses currently running in sequential mode.\n\n");
	}
	pid_t tpid = waitpid(head->child_pid, head->child_status, 0);
	if(tpid != head->child_pid) {
		printf("Error with '%s'\n\n", (head->arr_for_exec)[0]);
	}
	free(head->arr_for_exec);
	free(head);
}
	

void check_process_p(struct node * head) { //this is purely to cycle through/ see which processes
//are finished for parallel
//	printf("\nchecking the processes\n");
	struct node * temp;
	struct node * curr = head;
	if(head==NULL) {
		printf("There are no processes currently running in parallel mode.\n\n");
	}
	if(curr->next == NULL) {
		int check = waitpid(curr->child_pid, (curr->child_status), WNOHANG); 
		//check first node
		if(check == -1) {
			printf("Error with child\n\n");
			free(curr->arr_for_exec);
			free(curr);
			curr = NULL;
		}
		else if(check != 0) {
			//temp = head;
			//head = head-> next;
			printf("Proccess call '%s' has finished.\n\n", (curr->arr_for_exec)[0]);
			free(curr->arr_for_exec);
			free(curr);
			curr = NULL;
		}
	}
	while(curr != NULL && curr->next != NULL) {
		int check = waitpid(curr->next->child_pid, (curr->next->child_status), WNOHANG);
		if(curr->next->next != NULL) { //if in middle
			if(check == -1) { //if error
				printf("Error with %s\n\n", (curr->next->arr_for_exec)[0]);
				temp = curr -> next;
				curr-> next = curr -> next -> next;
				free(temp->arr_for_exec);
				free(temp);
			}
			else if(check != 0) { //if process is done
				temp = curr->next;
				curr->next = curr -> next -> next;
				printf("Proccess call '%s' has finished.\n\n",(temp->arr_for_exec)[0]);
				free(temp->arr_for_exec);
				free(temp);
			}
		}
		else { //if curr->next->next == NULL: if at end
			if(check == -1) {
				printf("Error with %s\n\n", (curr->next->arr_for_exec)[0]);
				free(curr->next->arr_for_exec);
				free(curr->next);
				curr->next = NULL;
			}
			else if(check !=0) {
				printf("Proccess call '%s' has finished.\n\n",(curr->next->arr_for_exec)[0]);
				free(curr->next->arr_for_exec);
				free(curr->next);
				curr->next = NULL;
			}
		}
	curr = curr->next;		
	}
	printf("Exited loop once\n");
	if(head != NULL) { //if we have proccesses still running, go through list again
		check_process_p(head);
	}
	printf("Done with check_proccess_p\n");	
}

//Brett & Carrie
void trim(char* str, char* delim){
	//removes leading & trailing whitespaces and ';'s in str in-place. 
	int first_char = 0; //index of first non semicolon or whitespace character
	int last_char = 0; //index of the last non semicolon or whitespace character
	int seen_char = 0;
	int i=0;
	for(;str[i]!='\0';i++){
		if(!is_space_or_semi(str[i])){
			if(!seen_char){
				first_char = i;
				seen_char = 1;
			}
			last_char = i;
		}
	}
	
	if(first_char==last_char && !seen_char){
		str[first_char] = '\0';
		return;
	}
	
	int z = 0; 
	for(i=first_char;i<=last_char;i++){
		str[z] = str[i];
		z++;
	}
	str[z] = '\0';
}

//Brett
void print_chararr(char** arg){
	printf("printing array of char*s:\n");
	if(arg==NULL){
		printf("Null array");
		return;
	}
	int i = 0;
	while(arg[i]!=NULL){
		printf("%s\n", arg[i]);
		i++;
	}
	
	printf("%s\n",arg[i]);
}


//Brett and Mac and Carrie
void handle_commands(char** arr, struct node** head) {
	int exitvar = 0;
	char mode = '\0';
	int i = 0;
	struct node * newnode;	


	while(arr[i] != NULL){ 
	
		printf("parsing command: %s\n", arr[i]);
		char ** arr_for_exec = tokenify(arr[i],whitespace); 

		if(strcasecmp(arr_for_exec[0],"exit") == 0){
			exitvar = 1;
		}

		else if(strcasecmp(arr_for_exec[0],"mode") == 0){

			if(arr_for_exec[1] != NULL) {
				if(strcasecmp(arr_for_exec[1], "p") ==0 || strcasecmp(arr_for_exec[1], "parallel") ==0) {
					mode = 'p';	
				}
				else if(strcasecmp(arr_for_exec[1], "s") == 0 || strcasecmp(arr_for_exec[1], "sequential") ==0){
					mode = 's'; 
				}else{
					mode = 'd';
				}
			}else{
				mode = 'd';
			}
		}else {
			pid_t child_pid;
			int child_status;
			child_pid = fork();
			int ret = 0;
			if(child_pid == 0) { //if child:
				ret = execv(arr_for_exec[0], arr_for_exec);
				//if execv returns, that means there was an error
				if(ret == -1) {
					printf("Error: Command '%s' is invalid.\n", arr_for_exec[0]);
					exit(0);
				}
			}else { //if parent:
				if(parallel == 0) { //if sequential
					pid_t tpid = waitpid(child_pid, &child_status, 0);
					if(tpid!=child_pid)
						printf("Error with %s\n", arr_for_exec[0]);
				}else{
					newnode = (struct node*)malloc(sizeof(struct node));
					newnode->arr_for_exec = arr_for_exec;
					newnode->child_pid = child_pid;
					newnode->child_status = &child_status;
					newnode->next = NULL;
					if(*head == NULL) {
						*head = newnode;
					}
					else {
						newnode-> next = *head;
						*head = newnode;
					}
				}
			}				
		}
		i++;
		printf("freeing\n");
		print_chararr(arr_for_exec);
		printf("sizeof arr_for_exec: %lu\n", sizeof(arr_for_exec));
		free(arr_for_exec);
		printf("successfully freed\n");
		
	}
	if(parallel != 0) {
		check_process_p(newnode);
	}
	/*
	//This will go carry out the commands
	if(parallel == 0) { //if running sequentially
		run_command_s(arr);
	}
	else { //if running parallel
		run_command_p(arr, head);
	}
	*/
	if(mode == 'p') {
		
		parallel = 1; //global variable indicates operating in parallel
		printf("arrived in p mode, mode set to %d\n", parallel);
	}
	else if(mode == 's') {
		
		parallel = 0; //global variable indicates operating sequentially
		printf("arrived in s mode, mode set to %d\n", parallel);
	}
	else if(mode== 'd') {
		printf("arrived in display, mode set to %d\n", parallel);
		if(parallel == 0) {
			printf("The mode is currently sequential.\n");
		}
		else {
			printf("The mode is currently parallel.\n");
		}
	}
	if(exitvar == 1) {
		exit(0);
	}	
}

//Brett & Carrie
int num_toks(char* str,const char* delim){  //remove delimiter tokens from front or end
	if(str==NULL || strlen(str)==0)
		return 0;
	
	int toks = 0;
	char* copy = strdup(str);
	char* s = strtok(copy, delim);
	for(;s!=NULL;s = strtok(NULL, delim))
		toks++;
	free(copy);
	return toks;
}

//Carrie
/*
Takes a string str and replaces the first '#' character 
with a null-terminator, efectively chopping off the '#'
and everything after it.  
*/
void nullcomment(char* str) {
	if(str==NULL || strlen(str)==0)
		return;
	int i = 0;
	for(;str[i]!='\0';i++) {
		if(str[i]=='#') {
			str[i]='\0';
			break;
		}
	}
}

//Mac & Brett
char** tokenify(char* str, const char* delim){ 
//takes line of input from command line, breaking up by semicolons
	nullcomment(str);
	trim(str,whitespace);

	int tokCount = num_toks(str,delim);
	char** cmds = (char**)malloc(sizeof(char*)*(tokCount+1));

	
//	const char* sep = ";\n";
	char* tmp;
	char* s = strdup(str);
	char* word= strtok_r(s,delim,&tmp);
	int cmdCount = 0;
	for(; word != NULL; word = strtok_r(NULL,delim,&tmp)){
		trim(word, whitespace);
		if(strlen(word)!=0){
			cmds[cmdCount] = strdup(trim(word, whitespace));
			cmdCount++;	
		}
		
	}
	free(s);
	cmds[cmdCount] = NULL;
	return cmds;

}

//Brett
int main(int argc, char **argv) {
	char* input = (char*) malloc(sizeof(char)*1024);
	struct node * head = NULL;
	printf(">>>");
	while(fgets(input, 255, stdin)!=NULL){
		char ** cmds = tokenify(input,";");
		handle_commands(cmds,&head);
		printf(">>>");
	}
	printf("\n");
	return 0;
}


/*
Journal entry 1:
	It's day 1 of the zombie attacks.  The infestation has started on campus, and I'm afraid one of our coding teammates was... was infected.  We don't know what to do.  Also, all my boyfriend does is think about the code, instead of surviving the goddamn apocalypse.  
	Anyway....we have food, for survival.  Like indian curry.  (Shows we are real legit survivors).  We have weapons for protection; our brightly colored nerf guns will surly spark fear in both the zombie's brains and the brains they are feasting on (those turning zombie).  We've decided the only alternate form of attack is to add side remarks in our code commenting.  Other then that... well, let's just hope we find the cure, and hope that the Zombies' computer viruses aren't as virulent as their biological ones.  
	We must go and gather our wits.  We have a lot of work to do, in a very short period of time.  And an apocalypse to think about on the side.
	
	-Survivors out.
*/







/*
Braaaaaaaaaiiiiiiiiiiiiiiins

	-Zombies out
*/

